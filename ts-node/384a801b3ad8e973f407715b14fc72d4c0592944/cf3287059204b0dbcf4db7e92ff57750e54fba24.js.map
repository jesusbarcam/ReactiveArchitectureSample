{"version":3,"file":"/Users/Rawdog/Developer/Curses/AngularUniversity/Angular NgRx Store Reactive Architecture/Repository/ReactiveArchitectureSample/src/server/api/apiGetUserThreads.ts","sources":["/Users/Rawdog/Developer/Curses/AngularUniversity/Angular NgRx Store Reactive Architecture/Repository/ReactiveArchitectureSample/src/server/api/apiGetUserThreads.ts"],"names":[],"mappings":";;AAGA,4EAAyE;AACzE,0BAA4B;AAC5B,sCAAsD;AAGtD,2BAAkC,GAAe;IAE7C,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,UAAC,GAAY,EAAE,GAAa;QAEtD,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEtD,IAAM,cAAc,GAAG,2CAAoB,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,QAAQ,GAAc,EAAE,EACxB,cAAc,GAAa,EAAE,CAAC;QAElC,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM;YAEzB,IAAM,cAAc,GAAc,CAAC,CAAC,MAAM,CAAC,oBAAU,EAAE,UAAC,OAAW,IAAK,OAAA,OAAO,CAAC,QAAQ,IAAI,MAAM,CAAC,EAAE,EAA7B,CAA6B,CAAC,CAAC;YAEvG,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAE3C,cAAc,GAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;QAEzE,CAAC,CAAC,CAAC;QAEH,IAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa,IAAI,OAAA,wBAAc,CAAC,aAAa,CAAC,EAA7B,CAA6B,CAAC,CAAC,CAAC;QAEhG,IAAM,QAAQ,GAAgB;YAC5B,YAAY,cAAA;YACZ,QAAQ,UAAA;YACN,OAAO,EAAE,cAAc;SAC1B,CAAC;QAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEnC,CAAC,CAAC,CAAC;AAGP,CAAC;AAlCD,8CAkCC","sourcesContent":["\nimport {Application,Request,Response} from 'express';\nimport {AllUserData} from \"../../../shared/to/all-user-data\";\nimport {findDbThreadsPerUser} from \"../persistence/findDbThreadsPerUser\";\nimport * as _ from 'lodash';\nimport {dbMessages, dbParticipants} from \"../db-data\";\nimport {Message} from \"../../../shared/model/message\";\n\nexport function apiGetUserThreads(app:Application) {\n\n    app.route('/api/threads').get((req: Request, res: Response) => {\n\n        const participantId = parseInt(req.headers['userid']);\n\n        const threadsPerUser = findDbThreadsPerUser(participantId);\n\n        let messages: Message[] = [],\n            participantIds: string[] = [];\n\n        threadsPerUser.forEach(thread => {\n\n            const threadMessages: Message[] = _.filter(dbMessages, (message:any) => message.threadId == thread.id);\n\n            messages = messages.concat(threadMessages);\n\n            participantIds  = participantIds.concat(_.keys(thread.participants));\n\n        });\n\n        const participants = _.uniq(participantIds.map(participantId => dbParticipants[participantId]));\n\n        const response: AllUserData = {\n          participants,\n          messages,\n            threads: threadsPerUser\n        };\n\n        res.status(200).json(response);\n\n    });\n\n\n}\n"]}