{"version":3,"file":"/Users/Rawdog/Developer/Curses/AngularUniversity/Angular NgRx Store Reactive Architecture/Repository/ReactiveArchitectureSample/src/server/api/apiSaveNewMessage.ts","sources":["/Users/Rawdog/Developer/Curses/AngularUniversity/Angular NgRx Store Reactive Architecture/Repository/ReactiveArchitectureSample/src/server/api/apiSaveNewMessage.ts"],"names":[],"mappings":";;AAIA,0BAA4B;AAE5B,sCAA8D;AAC9D,gEAA6D;AAG7D,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAI1B,2BAAkC,GAAgB;IAE9C,GAAG,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,EAAE,GAAG;QAExC,IAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;QAEzB,IAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EACpC,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEpD,IAAM,OAAO,GAAY;YACrB,EAAE,EAAE,gBAAgB,EAAE;YACtB,QAAQ,UAAA;YACR,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;YAC/B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,aAAa,eAAA;SAChB,CAAC;QAEF,6BAA6B;QAC7B,6BAA6B;QAC7B,oBAAU,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;QAEjC,IAAM,MAAM,GAAG,+BAAc,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAEnC,IAAM,mBAAmB,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,QAAQ,CAAC,EAAE,CAAC,KAAK,aAAa,EAA9B,CAA8B,CAAC,CAAC;QAErG,mBAAmB,CAAC,OAAO,CAAC,UAAA,aAAa;YACrC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACxC,gCAAsB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE3D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAEvC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAE3B,CAAC,CAAC,CAAC;AAEP,CAAC;AAtCD,8CAsCC","sourcesContent":["\n\n\nimport {Application} from 'express';\nimport * as _ from 'lodash';\nimport {Message} from \"../../../shared/model/message\";\nimport {dbMessages, dbMessagesQueuePerUser} from \"../db-data\";\nimport {findThreadById} from \"../persistence/findThreadById\";\n\n\nlet messageIdCounter = 20;\n\n\n\nexport function apiSaveNewMessage(app: Application) {\n\n    app.route('/api/threads/:id').post((req, res) => {\n\n        const payload = req.body;\n\n        const threadId = parseInt(req.params.id),\n            participantId = parseInt(req.headers['userid']);\n\n        const message: Message = {\n            id: messageIdCounter++,\n            threadId,\n            timestamp: new Date().getTime(),\n            text: payload.text,\n            participantId\n        };\n\n        // save the new message, it's\n        // already linked to a thread\n        dbMessages[message.id] = message;\n\n        const thread = findThreadById(threadId);\n        thread.messageIds.push(message.id);\n\n        const otherParticipantIds = _.keys(thread.participants).filter(id => parseInt(id) !== participantId);\n\n        otherParticipantIds.forEach(participantId => {\n            thread.participants[participantId] += 1;\n            dbMessagesQueuePerUser[participantId].push(message.id);\n\n        });\n\n        thread.participants[participantId] = 0;\n\n        res.status(200).send();\n\n    });\n\n}\n\n\n"]}